#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 14 11:50:12 2024

@author: hpc
"""

#%%
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt

#%%
# Load the dataset
df = pd.read_csv("/home/hpc/Desktop/newmalware/numericjson/numeric_data.csv")
print(df.head())

#%%
# Initial scatter plot
plt.scatter(df.num_dexclass, df['num_accessedfiles'])
plt.xlabel('num_dexclass')
plt.ylabel('num_accessedfiles')
plt.show()

#%%
# Apply KMeans clustering with 2 clusters
km = KMeans(n_clusters=2)
y_predicted = km.fit_predict(df[['num_dexclass', 'num_accessedfiles']])
df['cluster'] = y_predicted

#%%
# Plot clusters
df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]

plt.scatter(df1.num_dexclass, df1['num_accessedfiles'], color='green')
plt.scatter(df2.num_dexclass, df2['num_accessedfiles'], color='red')
plt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], color='purple', marker='*', label='centroid')
plt.xlabel('num_dexclass')
plt.ylabel('num_accessedfiles')
plt.legend()
plt.show()

#%%
# Normalize the features
scaler = MinMaxScaler()

df['num_accessedfiles'] = scaler.fit_transform(df[['num_accessedfiles']])
df['num_dexclass'] = scaler.fit_transform(df[['num_dexclass']])
print(df.head())

#%%
# Scatter plot after scaling
plt.scatter(df.num_dexclass, df['num_accessedfiles'])
plt.xlabel('num_dexclass')
plt.ylabel('num_accessedfiles')
plt.show()

#%%
# Apply KMeans clustering with 3 clusters
km = KMeans(n_clusters=2)
y_predicted = km.fit_predict(df[['num_dexclass', 'num_accessedfiles']])
df['cluster'] = y_predicted

#%%
# Plot clusters
df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]

plt.scatter(df1.num_dexclass, df1['num_accessedfiles'], color='green')
plt.scatter(df2.num_dexclass, df2['num_accessedfiles'], color='red')
plt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], color='purple', marker='*', label='centroid')
plt.xlabel('num_dexclass')
plt.ylabel('num_accessedfiles')
plt.legend()
plt.show()

#%%
# Calculate SSE for a range of k values
sse = []
k_rng = range(1, 10)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(df[['num_dexclass', 'num_accessedfiles']])
    sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng, sse)
plt.show()
#%%
sse