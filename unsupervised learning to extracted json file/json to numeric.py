#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug 13 15:15:51 2024

@author: hpc
"""
import os
import json
import pandas as pd
import glob

# Directory containing your JSON files
json_dir = '/home/hpc/Desktop/malware/onlyjsonfiles'
output_dir = '/home/hpc/Desktop/malware/1numeric_data'

if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Function to convert JSON file to a numerical format
def process_json(file_path):
    try:
        with open(file_path, 'r') as file:
            content = file.read().strip()
            if not content:
                print(f"Warning: {file_path} is empty. Skipping.")
                return None
            data = json.loads(content)

        # Extract features
        accessedfiles = data.get('accessedfiles', {})
        apkName = data.get('apkName', '')
        dexclass = data.get('dexclass', {})
        fdaccess = data.get('fdaccess', {})
        closenet = data.get('closenet', {})
        cryptousage = data.get('cryptousage', {})
        dataleaks = data.get('dataleaks', {})
        enfperm = data.get('enfperm', {})

        # Convert to numerical features
        features = {
            'apkName_length': len(apkName),
            'num_accessedfiles': len(accessedfiles),
            'num_dexclass': len(dexclass),
            'num_fdaccess': len(fdaccess),
            'num_closenet': len(closenet),
            'num_cryptousage': len(cryptousage),
            'num_dataleaks': len(dataleaks),
            'num_enfperm': len(enfperm)
        }

        return features
    
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON in file {file_path}: {e}")
        return None
    except Exception as e:
        print(f"Unexpected error processing file {file_path}: {e}")
        return None

# Automatically find all JSON files in the directory
json_files = glob.glob(os.path.join(json_dir, '*.json'))

# Process all JSON files
results = []
for file_path in json_files:
    features = process_json(file_path)
    if features:  # Only append if features were successfully extracted
        features['file_name'] = os.path.basename(file_path)
        results.append(features)

if results:
    # Create a DataFrame and save as CSV
    df = pd.DataFrame(results)
    output_file = os.path.join(output_dir, 'numeric_data.csv')
    df.to_csv(output_file, index=False)
    print(f'Processed data saved to {output_file}')
else:
    print("No valid JSON files were processed.")
