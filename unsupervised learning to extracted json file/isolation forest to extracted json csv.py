#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 14 15:01:15 2024

@author: hpc
"""

#%%
import pandas as pd
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt

#%%
# Load the dataset
df = pd.read_csv("/home/hpc/Desktop/newmalware/numericjson/numeric_data.csv")
print(df.head())

#%%
# Initial scatter plot
plt.scatter(df.num_dexclass, df['num_accessedfiles'])
plt.xlabel('num_dexclass')
plt.ylabel('num_accessedfiles')
plt.show()

#%%
# Normalize the features
scaler = MinMaxScaler()
df['num_accessedfiles'] = scaler.fit_transform(df[['num_accessedfiles']])
df['num_dexclass'] = scaler.fit_transform(df[['num_dexclass']])
print(df.head())

#%%
# Apply Isolation Forest
iso_forest = IsolationForest(contamination= 'auto', random_state=42)
df['anomaly'] = iso_forest.fit_predict(df[['num_dexclass', 'num_accessedfiles']])
df['anomaly_score'] = iso_forest.decision_function(df[['num_dexclass', 'num_accessedfiles']])

#%%
# Separate the normal points and anomalies
df_normal = df[df.anomaly == 1]
df_anomaly = df[df.anomaly == -1]

#%%
# Plot the results
plt.scatter(df_normal.num_dexclass, df_normal['num_accessedfiles'], color='green', label='Normal')
plt.scatter(df_anomaly.num_dexclass, df_anomaly['num_accessedfiles'], color='red', label='Anomaly')
plt.xlabel('num_dexclass')
plt.ylabel('num_accessedfiles')
plt.legend()
plt.show()

#%%
# Print the number of anomalies detected
num_anomalies = len(df_anomaly)
print(f'Number of anomalies detected: {num_anomalies}')

#%%
# Print some of the anomaly scores
print(df[['num_dexclass', 'num_accessedfiles', 'anomaly_score']].head())
