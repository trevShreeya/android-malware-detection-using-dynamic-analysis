#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 14 16:54:45 2024

@author: hpc
"""

#%%
import pandas as pd
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt

#%%
# Load the dataset
df = pd.read_csv("/home/hpc/Desktop/newmalware/numericjson/numeric_data.csv")
print(df.head())

#%%
# Normalize the features
scaler = MinMaxScaler()
df['num_accessedfiles'] = scaler.fit_transform(df[['num_accessedfiles']])
df['num_dexclass'] = scaler.fit_transform(df[['num_dexclass']])
print(df.head())

#%%
# Apply Isolation Forest
iso_forest = IsolationForest(contamination='auto', random_state=42)
df['iso_anomaly'] = iso_forest.fit_predict(df[['num_dexclass', 'num_accessedfiles']])
df['iso_score'] = iso_forest.decision_function(df[['num_dexclass', 'num_accessedfiles']])

#%%
# Apply Local Outlier Factor (LOF)
lof = LocalOutlierFactor(n_neighbors=20)
df['lof_anomaly'] = lof.fit_predict(df[['num_dexclass', 'num_accessedfiles']])
# Note: LOF does not have a decision_function, it directly labels points as 1 (inlier) or -1 (outlier)

#%%
# Combine the results from Isolation Forest and LOF
# An anomaly is flagged if either of the methods marks it as an anomaly
df['combined_anomaly'] = df.apply(lambda row: -1 if (row['iso_anomaly'] == -1 or row['lof_anomaly'] == -1) else 1, axis=1)

#%%
# Separate the normal points and anomalies based on the combined result
df_normal = df[df.combined_anomaly == 1]
df_anomaly = df[df.combined_anomaly == -1]

#%%
# Plot the results
plt.scatter(df_normal.num_dexclass, df_normal['num_accessedfiles'], color='green', label='Normal')
plt.scatter(df_anomaly.num_dexclass, df_anomaly['num_accessedfiles'], color='red', label='Anomaly')
plt.xlabel('num_dexclass')
plt.ylabel('num_accessedfiles')
plt.legend()
plt.show()

#%%
# Print the number of anomalies detected
num_anomalies = len(df_anomaly)
print(f'Number of anomalies detected: {num_anomalies}')

#%%
# Print some of the combined anomaly detection results
print(df[['num_dexclass', 'num_accessedfiles', 'iso_anomaly', 'lof_anomaly', 'combined_anomaly']].head())
