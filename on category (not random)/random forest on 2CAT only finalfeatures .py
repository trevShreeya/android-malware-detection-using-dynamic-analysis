#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 15 15:14:35 2024

@author: hpc
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load data
csv_file = '/home/hpc/Desktop/finalfeatures.csv'
df = pd.read_csv(csv_file)

# Filter for 'Scareware' and 'Backdoor'
df_filtered = df[df['Category'].isin(['Scareware', 'Backdoor'])]
print("Filtered Data:\n", df_filtered.head(9), "\n")
# Encode labels
label_encoder = LabelEncoder()
df_filtered['Category'] = label_encoder.fit_transform(df_filtered['Category'])
print("Encoded Labels:\n", df_filtered.head(9), "\n")

# Display unique categories to ensure filtering worked
unique_categories = label_encoder.classes_
print("Filtered Unique Categories:", unique_categories)

# Separate features and labels
X = df_filtered.drop(['Category'], axis=1)
y = df_filtered['Category']

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
print("Normalized Features:\n", pd.DataFrame(X_scaled, columns=X.columns).head(), "\n")

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
print("Training Set Shape:", X_train.shape, y_train.shape)
print("Testing Set Shape:", X_test.shape, y_test.shape, "\n")

# Train Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions
y_pred = rf_model.predict(X_test)

# Evaluate the model
print("Random Forest Classifier Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred, target_names=unique_categories))
